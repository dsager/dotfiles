[user]

  name = Daniel Sager
  email = software@sager1.de

[core]

  excludesfile = ~/.gitignore_global
  autocrlf = input

[push]

  default = current

[alias]

  # status using the short format
  s = status -s

  # nice log views
  l = log --all --graph --pretty=format:'%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
  changes = log --name-status --pretty=format:'%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit

  # list commits in reverse order, usefule for PR descriptions when invoked w/ a limit
  commits = log --pretty=format:%B --reverse

  # Remove merged branches
  cleanup = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

  # Find commits by source code
  fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

  # Find commits by commit message
  fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

  # verbose branch & remote info
  branches = "!git --no-pager branch -a"
  remotes = "!git --no-pager remote -v"

  # Amend the currently staged files to the latest commit
  amend = commit --amend --reuse-message=HEAD

[color]

  ui = true

[color "branch"]

  current = yellow reverse
  local = yellow
  remote = green

[color "diff"]

  meta = yellow bold
  frag = magenta bold # line info
  old = red # deletions
  new = green # additions

[color "status"]

  added = yellow
  changed = green
  untracked = cyan


[filter "media"]

  clean = git media clean %f
  smudge = git media smudge %f
  required = true

[git-up "fetch"]

  prune = true
  all = true

[git-up "bundler"]

  check = true

